generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}

enum TournamentType {
  TWO_PLAYER
  FOUR_PLAYER
}

enum TournamentStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
}

enum MatchStatus {
  PENDING
  ACTIVE
  COMPLETED
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}


model Match {
  id           Int      @id @default(autoincrement())
  tournamentId Int
  round        Int
  status       MatchStatus @default(PENDING)
  startedAt    DateTime?
  endedAt      DateTime?
  nextMatchId  Int?
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  nextMatch    Match?     @relation("NextMatch", fields: [nextMatchId], references: [id], onDelete: SetNull)
  previousMatches Match[] @relation("NextMatch")
  participants MatchParticipant[]
}

model MatchParticipant {
  id        Int     @id @default(autoincrement())
  matchId   Int
  userId    Int
  score     Int     @default(0)
  isWinner  Boolean @default(false)
  
  match     Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([matchId, userId])
}


model Friendship {
  id        Int     @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime @default(now())
  
  user      User    @relation("FriendshipInitiator", fields: [userId], references: [id], onDelete: Cascade)
  friend    User    @relation("FriendshipReceiver", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  sender      User     @relation("SenderRelation", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceiverRelation", fields: [receiverId], references: [id], onDelete: Cascade)
}

model BlockedUser {
  id          Int      @id @default(autoincrement())
  userId      Int
  blockedId   Int
  blockedAt   DateTime @default(now())
  
  user        User     @relation("UserWhoBlocked", fields: [userId], references: [id], onDelete: Cascade)
  blocked     User     @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)
  
  @@unique([userId, blockedId])
}


model Tournament {
  id          Int     @id @default(autoincrement())
  name        String
  type        TournamentType
  status      TournamentStatus @default(WAITING)
  createdAt   DateTime @default(now())
  creatorId   Int?
  
  creator     User?   @relation("TournamentCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  participants TournamentParticipant[]
  matches     Match[]
}

model TournamentParticipant {
  id           Int      @id @default(autoincrement())
  tournamentId Int
  userId       Int
  joinedAt     DateTime @default(now())
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tournamentId, userId])
}


model User {
  id                     Int                   @id @default(autoincrement())
  username               String                @unique
  email                  String                @unique
  passwordHash           String
  avatarUrl              String?
  status                 UserStatus            @default(OFFLINE)
  createdAt              DateTime              @default(now())
  lastLogin              DateTime?
  
  authentication         Authentication?
  stats                  UserStats?
  sentMessages           ChatMessage[]         @relation("SenderRelation")
  receivedMessages       ChatMessage[]         @relation("ReceiverRelation")
  participatedMatches    MatchParticipant[]
  participatedTournaments TournamentParticipant[]
  createdTournaments     Tournament[]          @relation("TournamentCreator")
  friendshipsInitiated   Friendship[]          @relation("FriendshipInitiator")
  friendshipsReceived    Friendship[]          @relation("FriendshipReceiver")
  blockedUsers           BlockedUser[]         @relation("UserWhoBlocked")
  blockedByUsers         BlockedUser[]         @relation("BlockedUser")
  sessions               Session[]
}

model Authentication {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  googleId    String? @unique
  tfaEnabled  Boolean @default(false)
  tfaSecret   String?
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStats {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  wins        Int     @default(0)
  losses      Int     @default(0)
  totalPoints Int     @default(0)
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  expiresAt   DateTime
  ipAddress   String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


