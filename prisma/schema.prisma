// This is your Prisma schema file
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String   @unique
  image     String? // URL to avatar image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Game statistics
  wins   Int @default(0)
  losses Int @default(0)

  // OAuth related fields
  googleId String? @unique

  // Two-factor authentication
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?

  // Relations
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends                Friendship[]    @relation("UserFriends")
  friendsOf              Friendship[]    @relation("FriendsOfUser")

  tournaments       Tournament[] @relation("TournamentParticipants")
  tournamentMatches MatchUser[]  @relation("TournamentMatchPlayers")

  // Online status
  isOnline Boolean  @default(false)
  lastSeen DateTime @default(now())

  @@map("users")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("PENDING") // PENDING, ACCEPTED, DECLINED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

model Tournament {
  id        Int       @id @default(autoincrement())
  name      String
  type      String // "2P" or "4P"
  status    String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  participants User[]            @relation("TournamentParticipants")
  matches      Match[]

  @@map("tournaments")
}

model Match {
  id            Int       @id @default(autoincrement())
  tournamentId  Int
  round         Int       @default(1) // 1: 예선, 2: 결승 등
  status        String    @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 관계
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matchUsers    MatchUser[]

  @@map("matches")
}

model MatchUser {
  id        Int       @id @default(autoincrement())
  matchId   Int
  userId    Int
  score     Int       @default(0)
  isWinner  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  match     Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User      @relation("TournamentMatchPlayers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([matchId, userId])
  @@map("match_users")
}
